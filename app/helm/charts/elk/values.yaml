version: 7.13.4



es-master:
  clusterName: "elasticsearch"
  nodeGroup: "master"
  roles:
    master: "true"
    ingest: "false"
    data: "false"
  replicas: 1
  # clusterHealthCheckParams: "local=true"
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    storageClassName: "standard"
    resources:
      requests:
        storage: 4Gi
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 3
    timeoutSeconds: 5

es-data:
  clusterName: "elasticsearch"
  nodeGroup: "data"
  roles:
    master: "false"
    ingest: "true"
    data: "true"
  replicas: 1
  # clusterHealthCheckParams: "local=true"
  # minimumMasterNodes: 1
  # clusterHealthCheckParams: 'wait_for_status=yellow&timeout=1s'
  resources:
    requests:
      cpu: "100m"
      memory: "4Gi"
    limits:
      cpu: "100m"
      memory: "6Gi"
  esJavaOpts: "-Xmx2g -Xms2g"
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    storageClassName: "standard"
    resources:
      requests:
        storage: 10Gi
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 3
    timeoutSeconds: 5

es-client:
  clusterName: "elasticsearch"
  nodeGroup: "client"
  roles:
    master: "false"
    ingest: "false"
    data: "false"
  replicas: 1
  # clusterHealthCheckParams: "local=true"
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    storageClassName: "standard"
    resources:
      requests:
        storage: 1Gi
  persistence:
    enabled: false
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 3
    timeoutSeconds: 5

kibana:
  elasticsearchHosts: "http://elasticsearch-client-headless:9200"
  replicas: 1

  # Extra environment variables to append to this nodeGroup
  # This will be appended to the current 'env:' key. You can use any of the kubernetes env
  # syntax here
  extraEnvs:
    - name: "NODE_OPTIONS"
      value: "--max-old-space-size=1800"

  # Allows you to load environment variables from kubernetes secret or config map
  envFrom: []
  # - secretRef:
  #     name: env-secret
  # - configMapRef:
  #     name: config-map

  # A list of secrets and their paths to mount inside the pod
  # This is useful for mounting certificates for security and for mounting
  # the X-Pack license
  secretMounts: []
  #  - name: kibana-keystore
  #    secretName: kibana-keystore
  #    path: /usr/share/kibana/data/kibana.keystore
  #    subPath: kibana.keystore # optional

  hostAliases: []
  #- ip: "127.0.0.1"
  #  hostnames:
  #  - "foo.local"
  #  - "bar.local"

  image: "docker.elastic.co/kibana/kibana"
  imageTag: "7.13.4"
  imagePullPolicy: "IfNotPresent"

  # additionals labels
  labels: {}

  podAnnotations: {}
    # iam.amazonaws.com/role: es-cluster

  resources:
    requests:
      cpu: "1000m"
      memory: "2Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"

  protocol: http

  serverHost: "0.0.0.0"

  healthCheckPath: "/app/kibana"

  # Allows you to add any config files in /usr/share/kibana/config/
  # such as kibana.yml
  kibanaConfig: {}
  #   kibana.yml: |
  #     key:
  #       nestedkey: value

  # If Pod Security Policy in use it may be required to specify security context as well as service account

  podSecurityContext:
    fsGroup: 1000

  securityContext:
    capabilities:
      drop:
      - ALL
    # readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000

  serviceAccount: ""

  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""

  httpPort: 5601

  extraVolumes:
    []
    # - name: extras
    #   emptyDir: {}

  extraVolumeMounts:
    []
    # - name: extras
    #   mountPath: /usr/share/extras
    #   readOnly: true
    #
  extraContainers: ""
  # - name: dummy-init
  #   image: busybox
  #   command: ['echo', 'hey']

  extraInitContainers: ""
  # - name: dummy-init
  #   image: busybox
  #   command: ['echo', 'hey']

  updateStrategy:
    type: "Recreate"

  service:
    type: NodePort
    loadBalancerIP: ""
    port: 5601
    nodePort: ""
    labels: {}
    annotations: {}
      # cloud.google.com/load-balancer-type: "Internal"
      # service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
      # service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      # service.beta.kubernetes.io/openstack-internal-load-balancer: "true"
      # service.beta.kubernetes.io/cce-load-balancer-internal-vpc: "true"
    loadBalancerSourceRanges: []
      # 0.0.0.0/0
    httpPortName: http

  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 3
    timeoutSeconds: 5

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

  nameOverride: ""
  fullnameOverride: ""

  lifecycle: {}
    # preStop:
    #   exec:
    #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
    # postStart:
    #   exec:
    #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
